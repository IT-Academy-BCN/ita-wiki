info:
  version: 1.0.0
  title: IT Academy Wiki
  description: Our app implements a Wiki to be used as a knowledge base by the
    students of the Barcelona Activa's IT Academy
openapi: 3.0.0
components:
  headers:
    Set-Cookie:
      schema:
        type: string
        example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbGdieTNyemYwMDAweG44eDdzeXJvMnc2IiwiaWF0IjoxNjgxMjEyNzAzLCJleHAiOjE2ODEyOTkxMDN9.G1F5XQLYu0uwxnJDx_qDUV3avIUPxHb3Ld-XZYvUfNM;
          path=/; httponly
        description: Sets the JWT session cookie
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
  schemas:
    DniError:
      type: object
      properties:
        message:
          type: string
          example: DNI already exists
      required:
        - message
    EmailError:
      type: object
      properties:
        message:
          type: string
          example: Email already exists
      required:
        - message
    MissingTokenError:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized: Missing token"
      required:
        - error
    InvalidTokenError:
      type: object
      properties:
        error:
          type: string
          example: Token is not valid
      required:
        - error
    ValidationError:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
            example: invalid_string
          message:
            type: string
            example: Invalid
          path:
            type: array
            items:
              type: string
              example: dni
          validation:
            type: string
            example: regex
          expected:
            type: string
            example: string
          received:
            type: string
            example: undefined
        required:
          - code
          - message
          - path
      example:
        - validation: regex
          code: invalid_string
          message: Invalid
          path:
            - body
            - dni
        - code: invalid_type
          expected: string
          received: undefined
          path:
            - body
            - password
          message: Required
  parameters: {}
paths:
  /api/v1/auth/login:
    post:
      tags:
        - auth
      description: Takes a DNI and a password and returns a session cookie
      summary: Logs in a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dni:
                  type: string
                password:
                  type: string
                  minLength: 8
              required:
                - dni
                - password
      responses:
        "204":
          description: The user has been authenticated
          headers:
            Set-Cookie:
              $ref: "#/components/headers/Set-Cookie"
        "400":
          description: Zod validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/ValidationError"
                required:
                  - message
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
        "422":
          description: Invalid password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid password
                required:
                  - message
  /api/v1/auth/register:
    post:
      tags:
        - auth
      description: Takes a DNI, a password, a name and an email an registers a user to
        the system
      summary: Registers a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                dni:
                  type: string
                specialization:
                  type: string
                password:
                  type: string
                  minLength: 8
                  pattern: ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]*$
              required:
                - email
                - dni
                - specialization
                - password
      responses:
        "204":
          description: The user has been registered
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/ValidationError"
                  - $ref: "#/components/schemas/DniError"
                  - $ref: "#/components/schemas/EmailError"
        "500":
          description: Other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database error
                required:
                  - message
  /api/v1/auth/me:
    get:
      tags:
        - auth
      description: Returns information of a logged in user. Token recieved in the
        login necessary.
      summary: Get user information
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Token is valid and user information is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  dni:
                    type: string
                  email:
                    type: string
                    format: email
                  role:
                    type: string
                    enum:
                      - ADMIN
                      - REGISTERED
                  status:
                    type: string
                    enum:
                      - ACTIVE
                      - INACTIVE
                required:
                  - dni
                  - email
                  - role
                  - status
        "401":
          description: Missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingTokenError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                required:
                  - error
        "405":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTokenError"
        "500":
          description: Other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database error
                required:
                  - message
  /api/v1/categories:
    get:
      tags:
        - categories
      description: Get all categories saved in the database
      summary: Get all categories
      responses:
        "200":
          description: Categories fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                      example: Javascript
                  required:
                    - id
                    - name
  /api/v1/resources/me:
    get:
      tags:
        - resources
      description: Returns all the posted resources by a logged in user.
      summary: Get resources by logged in user
      security:
        - cookieAuth: []
      responses:
        "200":
          description: All resources posted by user are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  slug:
                    type: string
                  description:
                    type: string
                  url:
                    type: string
                    format: uri
                  resourceType:
                    type: string
                    enum:
                      - BLOG
                      - VIDEO
                      - TUTORIAL
                  userId:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                required:
                  - id
                  - title
                  - url
                  - resourceType
                  - userId
                  - createdAt
                  - updatedAt
        "401":
          description: Missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingTokenError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                required:
                  - error
        "405":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTokenError"
  /api/v1/resources/vote/:resourceId/:vote:
    put:
      tags:
        - resources
        - vote
      description: Allows a user to vote for a resource. Vote can be 1 for an upvote,
        -1 for a downvote or 0 to cancel a previous vote.
      summary: Allows a user to vote for a resource.
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: resourceId
          schema:
            type: string
            description: ID of the resource to vote
          required: true
        - in: path
          name: vote
          schema:
            type: integer
            maximum: 1
            minimum: -1
            description: 1 for upvote, -1 for downvote, 0 to cancel previous vote.
          required: true
      responses:
        "204":
          description: Vote was sent and stored successfully.
        "401":
          description: Missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingTokenError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                required:
                  - error
        "405":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTokenError"
  /api/v1/topics/category/:categoryId:
    get:
      tags:
        - topics
      description: Takes a category Id and returns the list of topics sharing that category
      summary: Returns topics by category
      parameters:
        - name: categoryId
          in: path
          required: true
          description: ID of the category for which to retrieve topics
      responses:
        "200":
          description: The server has successfully received the parameter
  /api/v1/topics:
    get:
      tags:
        - topics
      description: Returns a list of all topics
      summary: Returns topics
      responses:
        "200":
          description: The server has successfully received the parameter
  /api/v1/resources:
    get:
      tags:
        - resources
      description: Returns a collection of resources based on type and topic
      summary: Returns a collection of resources
      parameters:
        - in: query
          name: resourceType
          schema:
            type: string
            enum:
              - BLOG
              - VIDEO
              - TUTORIAL
            example: BLOG
          required: false
        - in: query
          name: topic
          schema:
            type: string
            example: Listas
          required: false
      responses:
        "200":
          description: Sucessful operation
          content:
            application/json:
              schema:
                type: object
                properties: {}
                example:
                  resources:
                    - id: clh4tra53000bxnmnzsf4dqq9
                      title: My resource in React
                      description: Lorem ipsum
                      url: http://www.example.com/resource/React.html
                      resourceType: BLOG
                      createdAt: 2023-05-01T12:36:32.151Z
                      updatedAt: 2023-05-01T12:36:32.151Z
                      user:
                        name: Kevin Mamaqi
                        email: admin@admin.com
                      topics:
                        - topic:
                            id: clh4tra4z0008xnmn7zrgvce7
                            name: Eventos
                            categoryId: clh4tra4t0004xnmn13adhwjv
                            createdAt: 2023-05-01T12:36:32.148Z
                            updatedAt: 2023-05-01T12:36:32.148Z
                        - topic:
                            id: clh4tra4z0009xnmn97g0hm6o
                            name: Listas
                            categoryId: clh4tra4t0002xnmnhj48vvba
                            createdAt: 2023-05-01T12:36:32.148Z
                            updatedAt: 2023-05-01T12:36:32.148Z
                    - id: clh4tra53000cxnmnf8f4gkao
                      title: My resource in Node
                      description: Lorem ipsum
                      url: http://www.example.com/resource/Node.html
                      resourceType: BLOG
                      createdAt: 2023-05-01T12:36:32.151Z
                      updatedAt: 2023-05-01T12:36:32.151Z
                      user:
                        name: Kevin Mamaqi
                        email: admin@admin.com
                      topics:
                        - topic:
                            id: clh4tra4z0008xnmn7zrgvce7
                            name: Eventos
                            categoryId: clh4tra4t0004xnmn13adhwjv
                            createdAt: 2023-05-01T12:36:32.148Z
                            updatedAt: 2023-05-01T12:36:32.148Z
                        - topic:
                            id: clh4tra4z0009xnmn97g0hm6o
                            name: Listas
                            categoryId: clh4tra4t0002xnmnhj48vvba
                            createdAt: 2023-05-01T12:36:32.148Z
                            updatedAt: 2023-05-01T12:36:32.148Z
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '{"message":"\nInvalid `.findMany()` invocation
                      in\n/ita-wiki/back/src/controllers/getResourcesController.ts:27:8\n'
                required:
                  - message
