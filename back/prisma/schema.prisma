generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  dni              String           @unique @db.VarChar(10)
  password         String
  name             String
  specialization   Category?        @relation(fields: [specializationId], references: [id])
  specializationId String?          @map("specialization")
  status           USER_STATUS      @default(INACTIVE)
  role             USER_ROLE        @default(REGISTERED)
  resources        Resource[]
  media            Media[]
  avatarId         String?          @unique @map("avatar_id")
  favorite         Favorites[]
  viewed           ViewedResource[]
  vote             Vote[]
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  @@map("user")
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
}

enum USER_ROLE {
  ADMIN
  REGISTERED
  MENTOR
}

model Resource {
  id           String              @id @default(cuid())
  title        String
  slug         String              @unique
  description  String?
  url          String
  resourceType RESOURCE_TYPE       @map("resource_type")
  topics       TopicsOnResources[]
  favorites    Favorites[]
  viewed       ViewedResource[]
  vote         Vote[]
  user         User                @relation(fields: [userId], references: [id])
  userId       String              @map("user_id")
  category     Category            @relation(fields: [categoryId], references: [id])
  categoryId   String              @map("category_id")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  @@map("resource")
}

enum RESOURCE_STATUS {
  SEEN
  NOT_SEEN
}

enum RESOURCE_TYPE {
  BLOG
  VIDEO
  TUTORIAL
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  resources Resource[]
  topics    Topic[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User[]
  Media     Media?   @relation(fields: [mediaId], references: [id])
  mediaId   String?  @unique @map("media_id")

  @@map("category")
}

model Topic {
  id         String              @id @default(cuid())
  name       String
  slug       String              @unique
  category   Category            @relation(fields: [categoryId], references: [id])
  categoryId String              @map("category_id")
  resources  TopicsOnResources[]
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")

  @@map("topic")
}

model Media {
  id        String     @id @default(cuid())
  mimeType  String     @map("mime_type")
  filePath  String     @map("file_path")
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Category  Category[]

  @@map("media")
}

model TopicsOnResources {
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @map("resource_id")
  topic      Topic    @relation(fields: [topicId], references: [id])
  topicId    String   @map("topic_id")
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([topicId, resourceId])
  @@map("topic_resource")
}

model Favorites {
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @map("resource_id")
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([userId, resourceId])
  @@map("favorites")
}

model ViewedResource {
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @map("resource_id")

  @@id([userId, resourceId])
  @@map("viewed_resource")
}

model Vote {
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @map("resource_id")
  vote       Int      @db.SmallInt // 1 upvote, -1 downvote
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([userId, resourceId])
  @@map("vote")
}
