info:
  version: 1.8.0
  title: IT Academy SSO Service
  description: This is an SSO service that is used accross all ITA services.
openapi: 3.0.0
components:
  schemas:
    EmailError:
      type: object
      properties:
        message:
          type: string
          example: email or dni already exists
      required:
        - message
    InputError:
      type: object
      properties:
        message:
          type: string
          example: Input is not a string
      required:
        - message
    MissingTokenError:
      type: object
      properties:
        message:
          type: string
          example: Missing token
      required:
        - message
    InvalidTokenError:
      type: object
      properties:
        message:
          type: string
          example: Token is not valid
      required:
        - message
    ForbiddenError:
      type: object
      properties:
        message:
          type: string
          example: Only active users can login
      required:
        - message
    MissingUserError:
      type: object
      properties:
        message:
          type: string
          example: User not found
      required:
        - message
    ValidationError:
      type: object
      properties:
        message:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: invalid_string
              message:
                type: string
                example: Invalid
              validation:
                type: string
                example: regex
              expected:
                type: string
                example: string
              received:
                type: string
                example: undefined
            required:
              - code
              - message
      required:
        - message
    InvalidCredentialsError:
      type: object
      properties:
        message:
          type: string
          example: Invalid Credentials
      required:
        - message
  parameters: {}
paths:
  /api/v1/auth/login:
    post:
      tags:
        - auth
      description: Takes a DNI and a password and returns authToken and refreshToken
      summary: Logs in a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dni:
                  type: string
                password:
                  type: string
                  minLength: 8
              required:
                - dni
                - password
      responses:
        "200":
          description: The user has been authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  authToken:
                    type: string
                    minLength: 1
                  refreshToken:
                    type: string
                    minLength: 1
                  id:
                    type: string
                required:
                  - authToken
                  - refreshToken
                  - id
        "400":
          description: Zod validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Invalid Credentials error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "403":
          description: Forbidden error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  /api/v1/auth/register:
    post:
      tags:
        - auth
      description: Takes a DNI, email and a password and registers a new user in the
        database. No object is returned.
      summary: Register a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dni:
                  type: string
                email:
                  type: string
                  minLength: 1
                  format: email
                  example: user@example.cat
                itineraryId:
                  type: string
                password:
                  type: string
                  minLength: 8
                  pattern: ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]*$
                confirmPassword:
                  type: string
                  minLength: 8
                  pattern: ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]*$
              required:
                - dni
                - email
                - itineraryId
                - password
                - confirmPassword
      responses:
        "200":
          description: The user has been registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                  - id
        "400":
          description: Zod validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: Email or User already exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailError"
        "422":
          description: Invalid itinerary ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid itinerary
                required:
                  - message
        "500":
          description: Other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database error
                required:
                  - message
  /api/v1/tokens/validate:
    post:
      tags:
        - token
      description: Validates a given authentication token.
      summary: Validate a Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authToken:
                  type: string
                  minLength: 1
              required:
                - authToken
              additionalProperties: false
      responses:
        "200":
          description: The token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                  - id
        "400":
          description: Zod validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Invalid Credentials error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "500":
          description: Other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database error
                required:
                  - message
  /api/v1/itinerary:
    get:
      tags:
        - itinerary
      description: Fetches all available itineraries
      summary: Get all itineraries
      responses:
        "200":
          description: List of all itineraries
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                      example: Frontend Angular
                    slug:
                      type: string
                      example: frontend-angular
                  required:
                    - id
                    - name
                    - slug
  /api/v1/user:
    post:
      tags:
        - user
      description: Returns information of a logged in user. Token received in the
        login necessary.
      summary: Get user information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authToken:
                  type: string
                  minLength: 1
              required:
                - authToken
              additionalProperties: false
      responses:
        "200":
          description: Token is valid and user information is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  dni:
                    type: string
                  email:
                    type: string
                    minLength: 1
                    format: email
                    example: user@example.cat
                  role:
                    type: string
                    enum:
                      - ADMIN
                      - MENTOR
                      - REGISTERED
                required:
                  - dni
                  - email
                  - role
        "400":
          description: Zod validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Invalid Credentials error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "500":
          description: Other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database error
                required:
                  - message
    patch:
      tags:
        - user
      description: Allows a logged in ADMIN user to modify another user.
      summary: Patch a user.
      requestBody:
        required: true
        description: Updates an existing user. The ID is mandatory, and all other fields
          are optional. Provide only the fields that need to be updated.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                authToken:
                  type: string
                  minLength: 1
                dni:
                  type: string
                email:
                  type: string
                  minLength: 1
                  format: email
                  example: user@example.cat
                password:
                  type: string
                  minLength: 8
                role:
                  type: string
                  enum:
                    - ADMIN
                    - MENTOR
                    - REGISTERED
                status:
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
                itineraryId:
                  type: string
              required:
                - id
                - authToken
              additionalProperties: false
      responses:
        "204":
          description: User has been modified
        "400":
          description: Zod validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingTokenError"
        "498":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTokenError"
        "500":
          description: Other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database error
                required:
                  - message
